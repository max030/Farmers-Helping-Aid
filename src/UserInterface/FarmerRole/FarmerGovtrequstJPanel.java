/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.FarmerRole;

import Business.Enterprises.Enterprise;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import javax.swing.JPanel;
import Business.Organization.FarmerOrganization;
import Business.Organization.Organization;
import static Business.Organization.Organization.Type.SoilAnalystOrganization;
import static Business.Organization.Organization.Type.WeatherAnalystOrganization;
import Business.Organization.OrganizationDirectory;
import Business.Organization.SoilAnalystOrganization;
import Business.Organization.WeatherAnalystOrganization;
import Business.WorkQueue.SoilAnalysisWorkRequest;
import Business.WorkQueue.WeatherAnalysisWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import org.xml.sax.InputSource;

/**
 *
 * @author Ishita
 */
public class FarmerGovtrequstJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private FarmerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Network network;

    /**
     * Creates new form FarmerGovtrequstJPanel
     */
    public FarmerGovtrequstJPanel(JPanel userProcessContainer, UserAccount userAccount, FarmerOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        valueLabel.setText(enterprise.getName());
        populateRequestTable();

    }

    public void populateRequestTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) soilWorkRequestJTable.getModel();

            model.setRowCount(0);

            for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {

                if (request instanceof SoilAnalysisWorkRequest) {
                    Object[] row = new Object[5];
                    // if(SoilAnalysisWorkRequest.getCropAnalysisResult) 
                    row[0] = request.getMessage();
                    row[1] = request.getReceiver();
                    row[2] = request.getStatus();
                    SoilAnalysisWorkRequest result = (SoilAnalysisWorkRequest) request;
                    if (result.getAnalysisResult() == null) {
                        result.setAnalysisResult("waiting");
                    }
                    row[3] = result;
                    //row[3] = result;
                    row[4] = (String) citynamejComboBox.getSelectedItem();
                    //   row[4]= request.getCityname();

                    model.addRow(row);
                }
            }
        } catch (Exception ex) {
            System.err.println(ex);
        }
    }

    public void populateWeatherRequestTable() {
        DefaultTableModel model = (DefaultTableModel) weatherRequestJTable1.getModel();

        model.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {

            if (request instanceof WeatherAnalysisWorkRequest) {
                Object[] row = new Object[5];
                row[0] = request.getMessage();
                row[1] = request.getReceiver();
                row[2] = request.getStatus();

                String result = ((WeatherAnalysisWorkRequest) request).getWeatherAnalysisResult();

                row[3] = result == null ? "Waiting" : result;

                row[4] = (String) citynamejComboBox.getSelectedItem();

                model.addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        soilWorkRequestJTable = new javax.swing.JTable();
        enterpriseLabel = new javax.swing.JLabel();
        WeatherRequestjButton = new javax.swing.JButton();
        SoilCropRequestjButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        valueLabel = new javax.swing.JLabel();
        showResultjButton = new javax.swing.JButton();
        citynamejComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cropjComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        yearjComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        weatherRequestJTable1 = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(550, 550));

        jLabel1.setText("Farmer Work Area ");

        soilWorkRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Result", "Location"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(soilWorkRequestJTable);

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");

        WeatherRequestjButton.setText("Weather Crop Anaylsis Request ");
        WeatherRequestjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeatherRequestjButtonActionPerformed(evt);
            }
        });

        SoilCropRequestjButton.setText("Soil Analysis Request");
        SoilCropRequestjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SoilCropRequestjButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        valueLabel.setText("<value>");

        showResultjButton.setText("Show Result");
        showResultjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showResultjButtonActionPerformed(evt);
            }
        });

        citynamejComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "New York", "California" }));
        citynamejComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                citynamejComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Locaton:");

        cropjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rice", "Wheat ", "Soyabean" }));
        cropjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropjComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Select Crop ");

        jLabel4.setText("Select Year:");

        yearjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2016" }));

        weatherRequestJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Result", "Location"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(weatherRequestJTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(showResultjButton)
                        .addGap(83, 83, 83))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(72, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(SoilCropRequestjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(WeatherRequestjButton)
                .addGap(135, 135, 135))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(citynamejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cropjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(68, 68, 68)
                                .addComponent(jLabel4)
                                .addGap(55, 55, 55)
                                .addComponent(yearjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(valueLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(citynamejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(yearjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addComponent(cropjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40)
                        .addComponent(WeatherRequestjButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backJButton)
                            .addComponent(showResultjButton))
                        .addGap(81, 81, 81))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SoilCropRequestjButton)
                        .addGap(161, 161, 161))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        populateRequestTable();
//        userProcessContainer.remove(this);
//        Component[] componentArray = userProcessContainer.getComponents();
//        Component component = componentArray[componentArray.length - 1];
//        FarmerWorkRequestJPanel fwrjp = (FarmerWorkRequestJPanel) component;
//        fwrjp.populateRequestTable();
//        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
//        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void WeatherRequestjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeatherRequestjButtonActionPerformed
        // TODO add your handling code here:

        String message = (String) yearjComboBox.getSelectedItem();
        WeatherAnalysisWorkRequest request = new WeatherAnalysisWorkRequest();
        request.setMessage(message);
        request.setSender(userAccount);
        request.setStatus("Sent");

        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof WeatherAnalystOrganization) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
        populateWeatherRequestTable();


    }//GEN-LAST:event_WeatherRequestjButtonActionPerformed

    private void SoilCropRequestjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SoilCropRequestjButtonActionPerformed
        // TODO add your handling code here:

        String message = (String) cropjComboBox.getSelectedItem();

        SoilAnalysisWorkRequest request = new SoilAnalysisWorkRequest();
        request.setMessage(message);
        request.setSender(userAccount);
        request.setStatus("Sent");

        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof SoilAnalystOrganization) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }

        populateRequestTable();
    }//GEN-LAST:event_SoilCropRequestjButtonActionPerformed

    private void showResultjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showResultjButtonActionPerformed

        // TODO add your handling code here:
        try
        {
        String xmlstr = xmlGener();
        List<String> ur = url(xmlstr);
        URL url1 = new URL(ur.get(0));
        URL url2 = new URL(ur.get(1));
        
        Desktop dt = Desktop.getDesktop();
        dt.browse(url1.toURI());
        dt.browse(url2.toURI());
        }
        catch(Exception ex)
        {
            System.out.println(ex);
        }

    }//GEN-LAST:event_showResultjButtonActionPerformed

    public String xmlGener() {
        // TODO code application logic here
        String xml = "";
        HttpURLConnection connection = null;

        try {

            URL url = new URL("http://api.wunderground.com/api/18b86246bf92db2b/conditions/q/MA/Boston.xml");

            //URL url = new URL("https://maps.googleapis.com/maps/api/geocode/xml?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=AIzaSyC-gLnnCvSU_LYUuzTPKZugKg3Bt9qnX50");
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            connection.setRequestProperty("Content-Language", "en-US");

            connection.setUseCaches(false);
            connection.setDoOutput(true);

            //Send request
            DataOutputStream dataOutputStream = new DataOutputStream(
                    connection.getOutputStream());

            dataOutputStream.flush();
            dataOutputStream.close();

            //Get Response  
            InputStream is = connection.getInputStream();
            BufferedReader bufferReader = new BufferedReader(new InputStreamReader(is));

            StringBuilder response = new StringBuilder(); // or StringBuffer if not Java 5+

            String lineBuild;
            xml = new String();
            while ((lineBuild = bufferReader.readLine()) != null) {
                xml += lineBuild;
            }
            response.append(xml);
            response.append('\r');

            bufferReader.close();

        } catch (Exception ex) {
            ex.printStackTrace();

        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
        return xml;
    }

    public Document stringToXML(String xmlStr) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder;
        try {
            documentBuilder = factory.newDocumentBuilder();
            Document doc = documentBuilder.parse(new InputSource(new StringReader(xmlStr)));
            return doc;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public List<String> url(String xmlstr) {
        List<String> link = new ArrayList<>();
        Document document;
        document = stringToXML(xmlstr);

        NodeList node = document.getElementsByTagName("*");
        for (int i = 0; i < node.getLength(); i++) {
            // Get element
            Element element = (Element) node.item(i);

            if (element.getTagName().equals("history_url")) {
                String history_url = element.getTextContent();
                link.add(history_url);

            }
            if (element.getTagName().equals("ob_url")) {
                String ob_url = element.getTextContent();
                link.add(ob_url);

            }

        }
        return link;
    }


    private void citynamejComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_citynamejComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_citynamejComboBoxActionPerformed

    private void cropjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropjComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cropjComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SoilCropRequestjButton;
    private javax.swing.JButton WeatherRequestjButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JComboBox<String> citynamejComboBox;
    private javax.swing.JComboBox<String> cropjComboBox;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton showResultjButton;
    private javax.swing.JTable soilWorkRequestJTable;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable weatherRequestJTable1;
    private javax.swing.JComboBox<String> yearjComboBox;
    // End of variables declaration//GEN-END:variables

}
